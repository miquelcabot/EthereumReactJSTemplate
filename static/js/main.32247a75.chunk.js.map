{"version":3,"sources":["ethereum/web3.js","components/Header.js","ethereum/factory.js","ethereum/notification.js","components/DeliveryRow.js","pages/Home.js","pages/DeliveryNew.js","pages/DeliveryShow.js","App.js","registerServiceWorker.js","index.js"],"names":["web3","Menu","stackable","style","marginTop","Item","as","Link","to","position","window","Web3","currentProvider","addEventListener","a","ethereum","enable","alert","DeliveryFactory","require","instance","eth","Contract","abi","address","Delivery","DeliveryRow","state","receiver","message","loading","errorMessage","componentDidMount","deliveryContract","notification","props","delivery","methods","receivers","call","setState","onView","onAccept","contractAddress","err","onFinish","Table","Row","Cell","this","id","sent","Button","animated","color","onClick","disabled","Content","hidden","visible","Icon","name","Message","error","header","content","Component","Home","loadingPage","getAccounts","accounts","factory","getSenderDeliveriesCount","senderDeliveriesCount","getReceiverDeliveriesCount","receiverDeliveriesCount","Promise","all","Array","parseInt","fill","map","index","senderDeliveries","receiverDeliveries","key","Segment","height","Dimmer","active","inverted","Loader","circular","fixed","Header","HeaderCell","Body","renderDeliveryRows","icon","primary","DeliveryNew","deposit","onSubmit","event","preventDefault","createDelivery","send","from","value","history","push","Form","Field","Input","onChange","target","label","labelPosition","withRouter","DeliveryShow","sender","match","params","getBalance","readOnly","App","Container","exact","path","component","isLocalhost","Boolean","location","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","ReactDOM","render","document","getElementById","URL","process","origin","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.32247a75.chunk.js","sourcesContent":["import Web3 from 'web3';\n\nlet web3\n\nif (window.web3) {\n  web3 = new Web3(window.web3.currentProvider);\n}\n\n/*\nhttps://medium.com/@parag.chirde/building-a-dapp-on-ethereum-with-vuejs-and-solidity-d01a24b54c1f\n\nhttps://medium.com/metamask/https-medium-com-metamask-breaking-change-injecting-web3-7722797916a8\n */\nwindow.addEventListener(\"load\", async () => {\n  // Modern dapp browsers...\n  if (window.ethereum) {\n    window.web3 = new Web3(window.ethereum);\n    try {\n      // Request account access if needed\n      await window.ethereum.enable();\n    } catch (error) {\n      alert('User denied account access...');\n    }\n  }\n  // Legacy dapp browsers...\n  else if (window.web3) {\n    window.web3 = new Web3(web3.currentProvider);\n  }\n  // Non-dapp browsers...\n  else {\n    alert(\"Non-Ethereum browser detected. You should consider trying MetaMask!\");\n  }\n});\n\nexport default web3;","import React from 'react';\nimport { Menu } from 'semantic-ui-react';\nimport { Link } from 'react-router-dom';\n\nexport default () => {\n    return (\n        <Menu stackable style={{ marginTop: '10px' }}>\n            <Menu.Item as={Link} to='/'>\n                eDelivery with Ethereum\n            </Menu.Item>\n            <Menu.Menu position=\"right\">\n                <Menu.Item as={Link} to='/'>\n                    Deliveries\n                </Menu.Item>\n                <Menu.Item as={Link} to='/deliveries/new'>\n                    +\n                </Menu.Item>\n            </Menu.Menu>\n        </Menu>\n    );\n};","import web3 from './web3';\n\n//const path = require(\"path\");\n//const fs = require(\"fs-extra\"); // fs with extra functions\n\nconst DeliveryFactory = require('./build/EDeliveryFactory.json');\n\nconst instance = new web3.eth.Contract(\n    DeliveryFactory.abi,\n    DeliveryFactory.address\n);\n\nexport default instance;","import web3 from './web3';\n\nconst Delivery = require('./build/EDelivery.json');\n\nexport default (address) => {\n    return new web3.eth.Contract(\n        Delivery.abi,\n        address\n    );\n}","import React, { Component } from 'react';\nimport { Link } from \"react-router-dom\";\nimport { Table, Button, Icon, Message } from 'semantic-ui-react';\nimport notification from '../ethereum/notification';\n\nclass DeliveryRow extends Component {\n  state = {\n    receiver: '',\n    message: '',\n    loading: false,\n    errorMessage: '',\n  };\n\n  componentDidMount = async () => {\n    let deliveryContract = notification(this.props.delivery);\n    let receiver = await deliveryContract.methods.receivers(0).call();\n    let message = await deliveryContract.methods.message().call();\n\n    this.setState({ \n      receiver: receiver,\n      message: message\n    });\n  }\n\n  onView = async () => {\n    /*const campaign = Campaign(this.props.address);\n\n    await campaign.methods.approveRequest(this.props.id).send({\n      from: accounts[0]\n    });*/\n  };\n\n  onAccept = async (contractAddress) => {\n\n    this.setState({ loading: true, errorMessage: '' });\n    \n    try {\n      // Refresh\n      alert('Delivery accepted!');\n      this.setState({ state: 'accepted' });\n    } catch (err) {\n      this.setState({ errorMessage: err.message });\n    } finally {\n        this.setState({ loading: false });\n    }\n  };\n\n  onFinish = async (contractAddress) => {\n\n    this.setState({ loading: true, errorMessage: '' });\n\n    try {\n      // Refresh\n      alert('Delivery finished!');\n      this.setState({ state: 'finished' });\n    } catch (err) {\n      this.setState({ errorMessage: err.message });\n    } finally {\n        this.setState({ loading: false });\n    }\n  };\n\n  render() {\n      return (\n          <Table.Row>\n              <Table.Cell>{this.props.id+1}</Table.Cell>\n              <Table.Cell>{this.props.delivery}</Table.Cell>\n              <Table.Cell>{this.state.receiver}</Table.Cell>\n              <Table.Cell>{this.state.message}</Table.Cell>\n              <Table.Cell>\n                  {\n                    this.props.sent ? (\n                      <Button animated='vertical' color='blue' onClick={() => this.onFinish(this.props.delivery)} disabled={this.state.state!=='accepted'} loading={this.state.loading}>\n                        <Button.Content hidden>Finish</Button.Content>\n                        <Button.Content visible>\n                          <Icon name='send' />\n                        </Button.Content>\n                      </Button>\n                    ) : (\n                      <Button animated='vertical' color='blue' onClick={() => this.onAccept(this.props.delivery)} disabled={this.state.state!=='created'} loading={this.state.loading}>\n                        <Button.Content hidden>Accept</Button.Content>\n                        <Button.Content visible>\n                          <Icon name='check' />\n                        </Button.Content>\n                    </Button>\n                    )\n                  }\n                  <Link to={\"/deliveries/\"+this.props.delivery}>\n                    <Button animated='vertical' color='blue' onClick={this.onView}>\n                      <Button.Content hidden>View</Button.Content>\n                      <Button.Content visible>\n                        <Icon name='eye' />\n                      </Button.Content>\n                    </Button>\n                  </Link>\n                  <Message error header=\"ERROR\" content={this.state.errorMessage} hidden={!this.state.errorMessage} />\n              </Table.Cell>\n          </Table.Row>\n          \n      );\n    }\n}\n\nexport default DeliveryRow;\n","import React, { Component } from 'react';\nimport { Icon, Button, Dimmer, Loader, Segment, Table } from 'semantic-ui-react';\nimport { Link } from 'react-router-dom';\nimport factory from '../ethereum/factory';\nimport web3 from '../ethereum/web3';\nimport DeliveryRow from '../components/DeliveryRow';\n\nclass Home extends Component {\n    state = {\n        loadingPage: true,\n        loading: false,\n        errorMessage: ''\n    };\n\n    componentDidMount = async () => {\n        try {\n            const accounts = await web3.eth.getAccounts();\n            const senderDeliveriesCount = await factory.methods.getSenderDeliveriesCount(accounts[0]).call();\n            const receiverDeliveriesCount = await factory.methods.getReceiverDeliveriesCount(accounts[0]).call();\n\n            const senderDeliveries = await Promise.all(\n                Array(parseInt(senderDeliveriesCount))\n                  .fill()\n                  .map((delivery, index) => {\n                    return factory.methods.senderDeliveries(accounts[0], index).call();\n                  })\n              );\n\n              const receiverDeliveries = await Promise.all(\n                Array(parseInt(receiverDeliveriesCount))\n                  .fill()\n                  .map((delivery, index) => {\n                    return factory.methods.receiverDeliveries(accounts[0], index).call();\n                  })\n              );\n\n            this.setState({ \n                senderDeliveries: senderDeliveries, \n                receiverDeliveries: receiverDeliveries \n            });\n        } finally {\n            this.setState({ loadingPage: false })\n        }\n    }\n\n    renderDeliveryRows(sent) {\n        var deliveries;\n        if (sent) {\n            deliveries = this.state.senderDeliveries;\n        } else {\n            deliveries = this.state.receiverDeliveries;\n        }\n        return deliveries.map((delivery, index) => {\n            return (\n                <DeliveryRow\n                    key={index}\n                    id={index}\n                    delivery={delivery}\n                    sent={sent}\n                />\n            );\n        });\n    }\n\n    render() {\n        // Loading\n        if (this.state.loadingPage) return (\n            <div>\n                <Segment style={{ height: '80vh' }}>\n                    <Dimmer active inverted>\n                        <Loader inverted content='Loading...' />\n                    </Dimmer>\n                </Segment>\n            </div>\n        );\n      \n        // Done\n        return (\n            <div>\n                <h3><Icon name='sign in alternate' circular />&nbsp;Received deliveries</h3>\n                <Table fixed>\n                    <Table.Header>\n                        <Table.Row>\n                            <Table.HeaderCell>#</Table.HeaderCell>\n                            <Table.HeaderCell>Address</Table.HeaderCell>\n                            <Table.HeaderCell>Sender</Table.HeaderCell>\n                            <Table.HeaderCell>Message</Table.HeaderCell>\n                            <Table.HeaderCell>Action</Table.HeaderCell>\n                        </Table.Row>\n                    </Table.Header>\n                    <Table.Body>{this.renderDeliveryRows(false)}</Table.Body>\n                </Table>\n                <h3><Icon name='sign out alternate' circular />&nbsp;Sent deliveries</h3>\n                <Table fixed>\n                    <Table.Header>\n                        <Table.Row>\n                            <Table.HeaderCell>#</Table.HeaderCell>\n                            <Table.HeaderCell>Address</Table.HeaderCell>\n                            <Table.HeaderCell>Receiver</Table.HeaderCell>\n                            <Table.HeaderCell>Message</Table.HeaderCell>\n                            <Table.HeaderCell>Action</Table.HeaderCell>\n                        </Table.Row>\n                    </Table.Header>\n                    <Table.Body>{this.renderDeliveryRows(true)}</Table.Body>\n                </Table>\n                <Link to=\"/deliveries/new\">\n                    <Button\n                        content = \"Send New Delivery\"\n                        icon = \"add circle\"\n                        primary = {true}\n                        />\n                </Link>\n            </div>\n        );\n    }\n}\n\nexport default Home;\n","import React, { Component } from 'react';\nimport { withRouter, Link } from \"react-router-dom\";\nimport { Form, Button, Message, Input } from 'semantic-ui-react';\nimport factory from '../ethereum/factory';\nimport web3 from '../ethereum/web3';\n\nclass DeliveryNew extends Component {\n  state = {\n    receiver: '',\n    message: '',\n    deposit: '',\n    loading: false,\n    errorMessage: ''\n  };\n\n  onSubmit = async event => {\n    event.preventDefault();\n\n    this.setState({ loading: true, errorMessage: '' });\n\n    try {\n        const accounts = await web3.eth.getAccounts();\n        await factory.methods\n            .createDelivery([this.state.receiver], this.state.message)\n            .send({ from: accounts[0], value: this.state.deposit });\n\n        alert('Delivery created!');\n        // Refresh, using withRouter\n        this.props.history.push('/');\n    } catch (err) {\n        this.setState({ errorMessage: err.message });\n    } finally {\n        this.setState({ loading: false });\n    }\n\n  };\n\n  render() {\n    return (\n      <div>\n        <Link to='/'>Back</Link>\n        <h3>Send New Delivery</h3>\n        <Form onSubmit={this.onSubmit} error={!!this.state.errorMessage}>\n          <Form.Field>\n            <label>Receiver</label>\n            <Input\n              value={this.state.receiver}\n              onChange={event => this.setState({ receiver: event.target.value })}\n            />\n          </Form.Field>\n\n          <Form.Field>\n            <label>Message</label>\n            <Input\n              value={this.state.message}\n              onChange={event => this.setState({ message: event.target.value })}\n            />\n          </Form.Field>\n\n          <Form.Field>\n            <label>Deposit</label>\n            <Input\n              label=\"wei\"\n              labelPosition=\"right\"\n              value={this.state.deposit}\n              onChange={event => this.setState({ deposit: event.target.value })}\n            />\n          </Form.Field>\n\n          <Message error header=\"ERROR\" content={this.state.errorMessage} />\n          <Button primary loading={this.state.loading}>\n            Send!\n          </Button>\n        </Form>\n      </div>\n    );\n  }\n}\n\nexport default withRouter(DeliveryNew);\n","import React, { Component } from 'react';\nimport { withRouter, Link } from \"react-router-dom\";\nimport { Form, Button, Message, Input, Dimmer, Loader } from 'semantic-ui-react';\nimport notification from '../ethereum/notification';\nimport web3 from '../ethereum/web3';\n\nclass DeliveryShow extends Component {\n  state = {\n    address: '',\n    sender: '',\n    receiver: '',\n    message: '',\n    deposit: '',\n    loading: false,\n    errorMessage: ''\n  };\n\n  componentDidMount = async () => {\n\n    this.setState({ loading: true, errorMessage: '' });\n\n    try {\n      let address = this.props.match.params.address;\n      let deliveryContract = notification(address);\n\n      let deposit = await web3.eth.getBalance(address)\n\n      let sender = await deliveryContract.methods.sender().call();\n      let receiver = await deliveryContract.methods.receivers(0).call();\n      let message = await deliveryContract.methods.message().call();\n\n      this.setState({ \n        address: address,\n        sender: sender,\n        receiver: receiver,\n        message: message,\n        deposit: deposit\n      });\n    } catch (err) {\n      this.setState({ errorMessage: err.message });\n    } finally {\n      this.setState({ loading: false });\n    }\n  }\n\n  onSubmit = async event => {\n    event.preventDefault();\n\n    // Refresh, using withRouter\n    this.props.history.push('/');\n  };\n\n  render() {\n    return (\n      <div>\n        <Dimmer inverted active={this.state.loading}>\n          <Loader inverted content='Loading...'></Loader>\n        </Dimmer>\n        <Link to='/'>Back</Link>\n        <h3>Show Delivery</h3>\n        <Form onSubmit={this.onSubmit} error={!!this.state.errorMessage} hidden={this.state.loading}>\n          <Form.Field>\n            <label>Address of Smart Contract</label>\n            <Input\n              readOnly\n              value={this.state.address}\n            />\n          </Form.Field>\n\n          <Form.Field>\n            <label>Sender</label>\n            <Input\n              readOnly\n              value={this.state.sender}\n            />\n          </Form.Field>\n\n          <Form.Field>\n            <label>Receiver</label>\n            <Input\n              readOnly\n              value={this.state.receiver}\n            />\n          </Form.Field>\n\n          <Form.Field>\n            <label>Message</label>\n            <Input\n              readOnly\n              value={this.state.message}\n            />\n          </Form.Field>\n\n          <Form.Field>\n            <label>Deposit</label>\n            <Input\n              label=\"wei\"\n              labelPosition=\"right\"\n              value={this.state.deposit}\n            />\n          </Form.Field>\n\n          <Message error header=\"ERROR\" content={this.state.errorMessage} />\n          <Button primary loading={this.state.loading}>\n            Close\n          </Button>\n        </Form>\n      </div>\n    );\n  }\n}\n\nexport default withRouter(DeliveryShow);\n","import React, { Component } from 'react';\nimport { Container } from 'semantic-ui-react';\nimport { Switch, Route } from 'react-router-dom';\nimport Header from './components/Header';\nimport Home from './pages/Home';\nimport DeliveryNew from './pages/DeliveryNew';\nimport DeliveryShow from './pages/DeliveryShow';\nimport 'semantic-ui-css/semantic.min.css';\n\nclass App extends Component {\n    render() {\n        return (\n            <Container>\n                <Header />\n                <main>\n                    <Switch>\n                        <Route exact path='/' component={Home}/>\n                        <Route exact path='/deliveries/new' component={DeliveryNew}/>\n                        <Route exact path='/deliveries/:address' component={DeliveryShow}/>\n                    </Switch>\n                </main>\n            </Container>\n        );\n    }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n  \nReactDOM.render((\n    <HashRouter>\n      <App />\n    </HashRouter>\n    ), document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}